{"ast":null,"code":"// frontend/src/services/api.js\n// Centralized Axios instance for API calls.\n\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api'\n});\n\n// Function to get all complaints\nexport const getComplaints = (page = 1) => api.get(`/complaints?page=${page}`);\n\n// Function to get a single complaint by ID\nexport const getComplaintById = id => api.get(`/complaints/${id}`);\n\n// Function to submit a new complaint\nexport const submitComplaint = formData => {\n  return api.post('/complaints', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n// Function to upvote a complaint\nexport const upvoteComplaint = (id, userId) => api.post(`/complaints/${id}/upvote`, {\n  userId\n});\n\n// ADD THIS ENTIRE BLOCK\n// This is an Axios interceptor. It \"intercepts\" every response from the API.\napi.interceptors.response.use(\n// If the response is successful (status 2xx), just return it.\nresponse => {\n  return response;\n},\n// If the response has an error...\nerror => {\n  // Check if the error is a 401 Unauthorized (which our server sends for an expired token).\n  if (error.response && error.response.status === 401) {\n    // If so, the token is bad. Log the user out.\n    localStorage.removeItem('token');\n    // Redirect to the login page.\n    window.location.href = '/welcome';\n    // You could also show a message here, e.g., \"Your session has expired. Please log in again.\"\n  }\n  // Return the error to be handled by the component that made the call.\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","getComplaints","page","get","getComplaintById","id","submitComplaint","formData","post","headers","upvoteComplaint","userId","interceptors","response","use","error","status","localStorage","removeItem","window","location","href","Promise","reject"],"sources":["D:/SIH/0.1X ENGINEERS/prototype/jan-suvida/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\n// Centralized Axios instance for API calls.\r\n\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n});\r\n\r\n// Function to get all complaints\r\nexport const getComplaints = (page = 1) => api.get(`/complaints?page=${page}`);\r\n\r\n// Function to get a single complaint by ID\r\nexport const getComplaintById = (id) => api.get(`/complaints/${id}`);\r\n\r\n// Function to submit a new complaint\r\nexport const submitComplaint = (formData) => {\r\n  return api.post('/complaints', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n// Function to upvote a complaint\r\nexport const upvoteComplaint = (id, userId) => api.post(`/complaints/${id}/upvote`, { userId });\r\n\r\n\r\n// ADD THIS ENTIRE BLOCK\r\n// This is an Axios interceptor. It \"intercepts\" every response from the API.\r\napi.interceptors.response.use(\r\n  // If the response is successful (status 2xx), just return it.\r\n  (response) => {\r\n    return response;\r\n  },\r\n  // If the response has an error...\r\n  (error) => {\r\n    // Check if the error is a 401 Unauthorized (which our server sends for an expired token).\r\n    if (error.response && error.response.status === 401) {\r\n      // If so, the token is bad. Log the user out.\r\n      localStorage.removeItem('token');\r\n      // Redirect to the login page.\r\n      window.location.href = '/welcome';\r\n      // You could also show a message here, e.g., \"Your session has expired. Please log in again.\"\r\n    }\r\n    // Return the error to be handled by the component that made the call.\r\n    return Promise.reject(error);\r\n  }\r\n);\r\nexport default api;"],"mappings":"AAAA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI;AAC5C,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,GAAG,CAAC,KAAKP,GAAG,CAACQ,GAAG,CAAC,oBAAoBD,IAAI,EAAE,CAAC;;AAE9E;AACA,OAAO,MAAME,gBAAgB,GAAIC,EAAE,IAAKV,GAAG,CAACQ,GAAG,CAAC,eAAeE,EAAE,EAAE,CAAC;;AAEpE;AACA,OAAO,MAAMC,eAAe,GAAIC,QAAQ,IAAK;EAC3C,OAAOZ,GAAG,CAACa,IAAI,CAAC,aAAa,EAAED,QAAQ,EAAE;IACvCE,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACL,EAAE,EAAEM,MAAM,KAAKhB,GAAG,CAACa,IAAI,CAAC,eAAeH,EAAE,SAAS,EAAE;EAAEM;AAAO,CAAC,CAAC;;AAG/F;AACA;AACAhB,GAAG,CAACiB,YAAY,CAACC,QAAQ,CAACC,GAAG;AAC3B;AACCD,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC;AACD;AACCE,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACnD;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,UAAU;IACjC;EACF;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AACD,eAAepB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}