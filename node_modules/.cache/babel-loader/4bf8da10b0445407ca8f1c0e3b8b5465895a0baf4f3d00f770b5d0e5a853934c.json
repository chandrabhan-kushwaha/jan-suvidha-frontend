{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\0.1X ENGINEERS\\\\prototype\\\\jan-suvida\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/components/ProtectedRoute.jsx\nimport React, { useContext } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport AuthContext from '../context/AuthContext';\nimport Spinner from './Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute({\n  children\n}) {\n  _s();\n  const {\n    user,\n    loading\n  } = useContext(AuthContext);\n  const location = useLocation();\n\n  // If the auth state is still loading, show a spinner\n  // This prevents a flicker while the token is being verified\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n  // If loading is finished and there's no user, redirect to login\n  if (!user) {\n    // We pass the original location in the state\n    // so we can redirect back after a successful login\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If the user is logged in, render the page they requested\n  return children;\n}\n_s(ProtectedRoute, \"tB7A/o7CBMQOqZUvat21Jk5Wn20=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","useLocation","AuthContext","Spinner","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","user","loading","location","className","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","_c","$RefreshReg$"],"sources":["D:/SIH/0.1X ENGINEERS/prototype/jan-suvida/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["// frontend/src/components/ProtectedRoute.jsx\r\nimport React, { useContext } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport AuthContext from '../context/AuthContext';\r\nimport Spinner from './Spinner';\r\n\r\nfunction ProtectedRoute({ children }) {\r\n  const { user, loading } = useContext(AuthContext);\r\n  const location = useLocation();\r\n\r\n  // If the auth state is still loading, show a spinner\r\n  // This prevents a flicker while the token is being verified\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If loading is finished and there's no user, redirect to login\r\n  if (!user) {\r\n    // We pass the original location in the state\r\n    // so we can redirect back after a successful login\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  // If the user is logged in, render the page they requested\r\n  return children;\r\n}\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAM;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGX,UAAU,CAACG,WAAW,CAAC;EACjD,MAAMS,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA,IAAIS,OAAO,EAAE;IACX,oBACEL,OAAA;MAAKO,SAAS,EAAC,2CAA2C;MAAAL,QAAA,eACxDF,OAAA,CAACF,OAAO;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEV;;EAEA;EACA,IAAI,CAACP,IAAI,EAAE;IACT;IACA;IACA,oBAAOJ,OAAA,CAACL,QAAQ;MAACiB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAER;MAAS,CAAE;MAACS,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA,OAAOT,QAAQ;AACjB;AAACC,EAAA,CAvBQF,cAAc;EAAA,QAEJL,WAAW;AAAA;AAAAoB,EAAA,GAFrBf,cAAc;AAyBvB,eAAeA,cAAc;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}